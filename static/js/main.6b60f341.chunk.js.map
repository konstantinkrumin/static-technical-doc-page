{"version":3,"sources":["components/navbar-components/navlink.js","components/navbar-components/navbar.js","components/main.js","App.js","index.js"],"names":["Navlink","props","className","href","title","Navbar","id","map","key","Main","target","rel","src","alt","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6b60f341.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navlink(props) {\r\n  return (\r\n    <a className=\"nav-link\" href={props.href}>\r\n      {props.title}\r\n    </a>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Navlink from \"./navlink\";\r\n\r\nexport default function Navbar() {\r\n  const NAV_LINKS = [\r\n    {\r\n      href: \"#Why_Flexbox?\",\r\n      title: \"Why Flexbox?\"\r\n    },\r\n    {\r\n      href: \"#Introducing_a_simple_example\",\r\n      title: \"Introducing a simple example\"\r\n    },\r\n    {\r\n      href: \"#Specifying_what_elements_to_lay_out_as_flexible_boxes\",\r\n      title: \"Specifying what elements to lay out as flexible boxes\"\r\n    },\r\n    {\r\n      href: \"#An_aside_on_the_flex_model\",\r\n      title: \"An aside on the flex model\"\r\n    },\r\n    {\r\n      href: \"#Columns_or_rows?\",\r\n      title: \"Columns or rows?\"\r\n    },\r\n    {\r\n      href: \"#Wrapping\",\r\n      title: \"Wrapping\"\r\n    },\r\n    {\r\n      href: \"#flex-flow_shorthand\",\r\n      title: \"flex-flow shorthand\"\r\n    },\r\n    {\r\n      href: \"#Flexible_sizing_of_flex_items\",\r\n      title: \"Flexible sizing of flex items\"\r\n    },\r\n    {\r\n      href: \"#flex:_shorthand_versus_longhand\",\r\n      title: \"flex: shorthand versus longhand\"\r\n    },\r\n    {\r\n      href: \"#Horizontal_and_vertical_alignment\",\r\n      title: \"Horizontal and vertical alignment\"\r\n    },\r\n    {\r\n      href: \"#Ordering_flex_items\",\r\n      title: \"Ordering flex items\"\r\n    },\r\n    {\r\n      href: \"#Nested_flex_boxes\",\r\n      title: \"Nested flex boxes\"\r\n    },\r\n    {\r\n      href: \"#Cross_browser_compatibility\",\r\n      title: \"Cross browser compatibility\"\r\n    },\r\n    {\r\n      href: \"#Test_your_skills!\",\r\n      title: \"Test your skills!\"\r\n    },\r\n    {\r\n      href: \"#Summary\",\r\n      title: \"Summary\"\r\n    },\r\n    {\r\n      href: \"#Reference\",\r\n      title: \"Reference\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <nav id=\"navbar\">\r\n      <header id=\"page_title\">\r\n        <h1>CSS Flexbox</h1>\r\n      </header>\r\n      <a className=\"nav-link\" id=\"nav_link_1\" href=\"#Introduction\">\r\n        Introduction\r\n      </a>\r\n      {NAV_LINKS.map(({ href, title }, key) => (\r\n        <Navlink key={key} href={href} title={title} />\r\n      ))}\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Main() {\r\n  return (\r\n    <main id=\"main-doc\">\r\n      <section className=\"main-section\" id=\"Introduction\">\r\n        <header className=\"section_header\">\r\n          <h2>Introduction</h2>\r\n        </header>\r\n        <p>\r\n          <a\r\n            id=\"flexbox_def_link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2uuecut\"\r\n          >\r\n            Flexbox\r\n          </a>{' '}\r\n          is a one-dimensional layout method for laying out items in rows or\r\n          columns. Items flex to fill additional space and shrink to fit into\r\n          smaller spaces. This article explains all the fundamentals.\r\n        </p>\r\n        <div id=\"prerequisites_and_objective\">\r\n          <p>\r\n            <b>Prerequisites:</b>\r\n          </p>\r\n          <p>\r\n            HTML basics (study{' '}\r\n            <a\r\n              id=\"intro_to_html_link\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/3bhiupH\"\r\n            >\r\n              Introduction to HTML\r\n            </a>\r\n            ), and an idea of how CSS works (study{' '}\r\n            <a\r\n              id=\"intro_to_css_link\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/38bVy9k\"\r\n            >\r\n              Introduction to CSS\r\n            </a>\r\n            .)\r\n          </p>\r\n          <p>\r\n            <b>Objective:</b>\r\n          </p>\r\n          <p>\r\n            To learn how to use the Flexbox layout system to create web layouts.\r\n          </p>\r\n        </div>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Why_Flexbox?\">\r\n        <header className=\"section_header\">\r\n          <h2>Why Flexbox?</h2>\r\n        </header>\r\n        <p>\r\n          For a long time, the only reliable cross browser-compatible tools\r\n          available for creating CSS layouts were things like{' '}\r\n          <a\r\n            id=\"floats_link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2Uyh3ND\"\r\n          >\r\n            floats\r\n          </a>{' '}\r\n          and{' '}\r\n          <a\r\n            id=\"positioning_link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2tF6zAT\"\r\n          >\r\n            positioning\r\n          </a>\r\n          . These are fine and they work, but in some ways they are also rather\r\n          limiting and frustrating.\r\n        </p>\r\n        <p>\r\n          The following simple layout requirements are either difficult or\r\n          impossible to achieve with such tools, in any kind of convenient,\r\n          flexible way:\r\n        </p>\r\n        <ul>\r\n          <li>Vertically centering a block of content inside its parent.</li>\r\n          <li>\r\n            Making all the children of a container take up an equal amount of\r\n            the available width/height, regardless of how much width/height is\r\n            available.\r\n          </li>\r\n          <li>\r\n            Making all columns in a multiple column layout adopt the same height\r\n            even if they contain a different amount of content.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          As you'll see in subsequent sections, flexbox makes a lot of layout\r\n          tasks much easier. Let's dig in!\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Introducing_a_simple_example\">\r\n        <header className=\"section_header\">\r\n          <h2>Introducing a simple example</h2>\r\n        </header>\r\n        <p>\r\n          In this article we are going to get you to work through a series of\r\n          exercises to help you understand how flexbox works. To get started,\r\n          you should make a local copy of the first starter file —{' '}\r\n          <a\r\n            id=\"flexbox0.html_link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/2OBTKi2\"\r\n          >\r\n            flexbox0.html\r\n          </a>{' '}\r\n          from our github repo — load it in a modern browser (like Firefox or\r\n          Chrome), and have a look at the code in your code editor. You can{' '}\r\n          <a\r\n            id=\"see_it_live_here_link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/2UB9S7q\"\r\n          >\r\n            see it live here\r\n          </a>{' '}\r\n          also.\r\n        </p>\r\n        <p>\r\n          You'll see that we have a{' '}\r\n          <a\r\n            id=\"header\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H58WQC\"\r\n          >\r\n            &lt;header&gt;\r\n          </a>{' '}\r\n          element with a top level heading inside it, and a \"section\" element\r\n          containing three{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>\r\n          s. We are going to use these to create a fairly standard three column\r\n          layout.\r\n        </p>\r\n        <img\r\n          id=\"img_1\"\r\n          src=\"https://i.imgur.com/wuSeJ7M.png\"\r\n          alt=\"Sample flexbox example 1\"\r\n        />\r\n      </section>\r\n      <section\r\n        className=\"main-section\"\r\n        id=\"Specifying_what_elements_to_lay_out_as_flexible_boxes\"\r\n      >\r\n        <header className=\"section_header\">\r\n          <h2>Specifying what elements to lay out as flexible boxes</h2>\r\n        </header>\r\n        <p>\r\n          To start with, we need to select which elements are to be laid out as\r\n          flexible boxes. To do this, we set a special value of display on the\r\n          parent element of the elements you want to affect. In this case we\r\n          want to lay out the{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          elements, so we set this on the{' '}\r\n          <a\r\n            className=\"section\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ulMDUf\"\r\n          >\r\n            &lt;section&gt;\r\n          </a>{' '}\r\n          (which becomes a flex container):\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`section {\r\n          \\u00A0display: flex;\r\n          }`}\r\n        </code>\r\n        <p>The result of this should be something like so:</p>\r\n        <img\r\n          id=\"img_2\"\r\n          src=\"https://i.imgur.com/jjk1qDf.png\"\r\n          alt=\"Sample flexbox example 2\"\r\n        />\r\n        <p>\r\n          So, this single declaration gives us everything we need — incredible,\r\n          right? We have our multiple column layout with equal sized columns,\r\n          and the columns are all the same height. This is because the default\r\n          values given to flex items (the children of the flex container) are\r\n          set up to solve common problems such as this. More on those later.\r\n        </p>\r\n        <p className=\"note\">\r\n          <b>Note:</b> You can also set a{' '}\r\n          <a\r\n            id=\"display\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ScicIU\"\r\n          >\r\n            display\r\n          </a>{' '}\r\n          value of <b>inline-flex</b> if you wish to lay out inline items as\r\n          flexible boxes.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"An_aside_on_the_flex_model\">\r\n        <header className=\"section_header\">\r\n          <h2>An aside on the flex model</h2>\r\n        </header>\r\n        <p>\r\n          When elements are laid out as flexible boxes, they are laid out along\r\n          two axes:\r\n        </p>\r\n        <img\r\n          id=\"img_3\"\r\n          src=\"https://i.imgur.com/b005LYV.png\"\r\n          alt=\"Layout of the elements in the flexboxes along two axes: main and cross axes\"\r\n        />\r\n        <ul>\r\n          <li>\r\n            The <b>main axis</b> is the axis running in the direction the flex\r\n            items are being laid out in (e.g. as rows across the page, or\r\n            columns down the page.) The start and end of this axis are called\r\n            the <b>main start</b> and <b>main end</b>.\r\n          </li>\r\n          <li>\r\n            The <b>cross axis</b> is the axis running perpendicular to the\r\n            direction the flex items are being laid out in. The start and end of\r\n            this axis are called the <b>cross start</b> and <b>cross end</b>.\r\n          </li>\r\n          <li>\r\n            The parent element that has{' '}\r\n            <code className=\"code_intext\">display: flex</code> set on it (the{' '}\r\n            <a\r\n              className=\"section\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/2ulMDUf\"\r\n            >\r\n              &lt;section&gt;\r\n            </a>{' '}\r\n            in our example) is called the <b>flex container</b>.\r\n          </li>\r\n          <li>\r\n            The items being laid out as flexible boxes inside the flex container\r\n            are called <b>flex items</b> (the{' '}\r\n            <a\r\n              className=\"article\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/2H6a2LV\"\r\n            >\r\n              &lt;article&gt;\r\n            </a>{' '}\r\n            elements in our example).\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          Bear this terminology in mind as you go through subsequent sections.\r\n          You can always refer back to it if you get confused about any of the\r\n          terms being used.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Columns_or_rows?\">\r\n        <header className=\"section_header\">\r\n          <h2>Columns or rows?</h2>\r\n        </header>\r\n        <p>\r\n          Flexbox provides a property called{' '}\r\n          <a\r\n            className=\"flex-direction\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2vUynlw\"\r\n          >\r\n            flex-direction\r\n          </a>{' '}\r\n          that specifies what direction the main axis runs in (what direction\r\n          the flexbox children are laid out in) — by default this is set to row,\r\n          which causes them to be laid out in a row in the direction your\r\n          browser's default language works in (left to right, in the case of an\r\n          English browser).\r\n        </p>\r\n        <p>\r\n          Try adding the following declaration to your{' '}\r\n          <a\r\n            className=\"section\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ulMDUf\"\r\n          >\r\n            &lt;section&gt;\r\n          </a>{' '}\r\n          rule:\r\n        </p>\r\n        <code className=\"code_separate\">flex-direction: column;</code>\r\n        <p>\r\n          You'll see that this puts the items back in a column layout, much like\r\n          they were before we added any CSS. Before you move on, delete this\r\n          declaration from your example.\r\n        </p>\r\n        <p className=\"note\">\r\n          <b>Note:</b> You can also lay out flex items in a reverse direction\r\n          using the <b>row-reverse</b> and <b>column-reverse</b> values.\r\n          Experiment with these values too!\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Wrapping\">\r\n        <header className=\"section_header\">\r\n          <h2>Wrapping</h2>\r\n        </header>\r\n        <p>\r\n          One issue that arises when you have a fixed amount of width or height\r\n          in your layout is that eventually your flexbox children will overflow\r\n          their container, breaking the layout. Have a look at our{' '}\r\n          <a\r\n            className=\"flexbox-wrap0.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/3bx0W9c\"\r\n          >\r\n            flexbox-wrap0.html\r\n          </a>{' '}\r\n          example, and try{' '}\r\n          <a\r\n            className=\"viewing_it_live\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/3bn4tqi\"\r\n          >\r\n            viewing it live\r\n          </a>{' '}\r\n          (take a local copy of this file now if you want to follow along with\r\n          this example):\r\n        </p>\r\n        <img\r\n          id=\"img_4\"\r\n          src=\"https://i.imgur.com/DcvEIS7.png\"\r\n          alt=\"Sample flexbox wrapping example\"\r\n        />\r\n        <p>\r\n          Here we see that the children are indeed breaking out of their\r\n          container. One way in which you can fix this is to add the following\r\n          declaration to your{' '}\r\n          <a\r\n            className=\"section\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ulMDUf\"\r\n          >\r\n            &lt;section&gt;\r\n          </a>{' '}\r\n          rule:\r\n        </p>\r\n        <code className=\"code_separate\">flex-wrap: wrap;</code>\r\n        <p>\r\n          Also, add the following declaration to your{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          rule:\r\n        </p>\r\n        <code className=\"code_separate\">flex: 200px;</code>\r\n        <p>\r\n          Try this now; you'll see that the layout looks much better with this\r\n          included:\r\n        </p>\r\n        <img\r\n          id=\"img_5\"\r\n          src=\"https://i.imgur.com/pmkoY4A.png\"\r\n          alt=\"Sample flexbox example 5\"\r\n        />\r\n        <p>\r\n          We now have multiple rows — as many flexbox children are fitted onto\r\n          each row as makes sense, and any overflow is moved down to the next\r\n          line. The <code className=\"code_intext\">flex: 200px</code> declaration\r\n          set on the articles means that each will be at least 200px wide; we'll\r\n          discuss this property in more detail later on. You might also notice\r\n          that the last few children on the last row are each made wider so that\r\n          the entire row is still filled.\r\n        </p>\r\n        <p>\r\n          But there's more we can do here. First of all, try changing your{' '}\r\n          <a\r\n            className=\"flex-direction\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2vUynlw\"\r\n          >\r\n            flex-direction\r\n          </a>{' '}\r\n          property value to row-reverse — now you'll see that you still have\r\n          your multiple row layout, but it starts from the opposite corner of\r\n          the browser window and flows in reverse.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"flex-flow_shorthand\">\r\n        <header className=\"section_header\">\r\n          <h2>flex-flow shorthand</h2>\r\n        </header>\r\n        <p>\r\n          At this point it is worth noting that a shorthand exists for{' '}\r\n          <a\r\n            className=\"flex-direction\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2vUynlw\"\r\n          >\r\n            flex-direction\r\n          </a>{' '}\r\n          and{' '}\r\n          <a\r\n            className=\"flex-wrap\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2SAFE1Q\"\r\n          >\r\n            flex-wrap\r\n          </a>{' '}\r\n          —{' '}\r\n          <a\r\n            className=\"flex-flow\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/38cRmWK\"\r\n          >\r\n            flex-flow\r\n          </a>\r\n          . So for example, you can replace\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`flex-direction: row; \r\n          flex-wrap: wrap;`}\r\n        </code>\r\n        <p>with</p>\r\n        <code className=\"code_separate\">flex-flow: row wrap;</code>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Flexible_sizing_of_flex_items\">\r\n        <header className=\"section_header\">\r\n          <h2>Flexible sizing of flex items</h2>\r\n        </header>\r\n        <p>\r\n          Let's now return to our first example, and look at how we can control\r\n          what proportion of space flex items take up. Fire up your local copy\r\n          of{' '}\r\n          <a\r\n            className=\"flexbox0.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/2OBTKi2\"\r\n          >\r\n            flexbox0.html\r\n          </a>\r\n          , or take a copy of{' '}\r\n          <a\r\n            className=\"flexbox1.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/39hbKpS\"\r\n          >\r\n            flexbox1.html\r\n          </a>{' '}\r\n          as a new starting point (\r\n          <a\r\n            className=\"see_it_live\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/3bj6wfj\"\r\n          >\r\n            see it live\r\n          </a>\r\n          ).\r\n        </p>\r\n        <p>First, add the following rule to the bottom of your CSS:</p>\r\n        <code className=\"code_separate\">\r\n          {`article {\r\n            \\u00A0flex: 1;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          This is a unitless proportion value that dictates how much of the\r\n          available space along the main axis each flex item will take up. In\r\n          this case, we are giving each{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          element a value of 1, which means they will all take up an equal\r\n          amount of the spare space left after things like padding and margin\r\n          have been set. It is a proportion, meaning that giving each flex item\r\n          a value of 400000 would have exactly the same effect.\r\n        </p>\r\n        <p>Now add the following rule below the previous one:</p>\r\n        <code className=\"code_separate\">\r\n          {`article:nth-of-type(3) {\r\n            \\u00A0flex: 2;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Now when you refresh, you'll see that the third{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          takes up twice as much of the available width as the other two — there\r\n          are now four proportion units available in total. The first two flex\r\n          items have one each so they take 1/4 of the available space each. The\r\n          third one has two units, so it takes up 2/4 of the available space (or\r\n          1/2).\r\n        </p>\r\n        <p>\r\n          You can also specify a minimum size value inside the flex value. Try\r\n          updating your existing article rules like so:\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`article {\r\n            \\u00A0flex: 1 200px;\r\n          }`}\r\n        </code>\r\n        <br />\r\n        <code className=\"code_separate\">\r\n          {`article:nth-of-type(3) {\r\n            \\u00A0flex: 2 200px;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          This basically states \"Each flex item will first be given 200px of the\r\n          available space. After that, the rest of the available space will be\r\n          shared out according to the proportion units.\" Try refreshing and\r\n          you'll see a difference in how the space is shared out.\r\n        </p>\r\n        <img\r\n          id=\"img_6\"\r\n          src=\"https://i.imgur.com/igh28HZ.png\"\r\n          alt=\"Sample flexbox example 6\"\r\n        />\r\n        <p>\r\n          The real value of flexbox can be seen in its\r\n          flexibility/responsiveness — if you resize the browser window, or add\r\n          another{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          element, the layout continues to work just fine.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"flex:_shorthand_versus_longhand\">\r\n        <header className=\"section_header\">\r\n          <h2>flex: shorthand versus longhand</h2>\r\n        </header>\r\n        <p>\r\n          <a\r\n            className=\"flex\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2OCWxYs\"\r\n          >\r\n            flex\r\n          </a>{' '}\r\n          is a shorthand property that can specify up to three different values:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            The unitless proportion value we discussed above. This can be\r\n            specified individually using the{' '}\r\n            <a\r\n              className=\"flex-flow\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/38cRmWK\"\r\n            >\r\n              flex-flow\r\n            </a>{' '}\r\n            longhand property.\r\n          </li>\r\n          <li>\r\n            A second unitless proportion value —{' '}\r\n            <a\r\n              className=\"flex-shrink\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/37csiOu\"\r\n            >\r\n              flex-shrink\r\n            </a>{' '}\r\n            — that comes into play when the flex items are overflowing their\r\n            container. This specifies how much of the overflowing amount is\r\n            taken away from each flex item's size, to stop them overflowing\r\n            their container. This is quite an advanced flexbox feature, and we\r\n            won't be covering it any further in this article.\r\n          </li>\r\n          <li>\r\n            The minimum size value we discussed above. This can be specified\r\n            individually using the{' '}\r\n            <a\r\n              className=\"flex-basis\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/37csiOu\"\r\n            >\r\n              flex-basis\r\n            </a>{' '}\r\n            longhand value.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          We'd advise against using the longhand flex properties unless you\r\n          really have to (for example, to override something previously set).\r\n          They lead to a lot of extra code being written, and they can be\r\n          somewhat confusing.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Horizontal_and_vertical_alignment\">\r\n        <header className=\"section_header\">\r\n          <h2>Horizontal and vertical alignment</h2>\r\n        </header>\r\n        <p>\r\n          You can also use flexbox features to align flex items along the main\r\n          or cross axis. Let's explore this by looking at a new example —{' '}\r\n          <a\r\n            className=\"flex-align0.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/2tCK8MG\"\r\n          >\r\n            flex-align0.html\r\n          </a>{' '}\r\n          (\r\n          <a\r\n            className=\"see_it_live_also\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/2HaXRgM\"\r\n          >\r\n            see it live also\r\n          </a>\r\n          ) — which we are going to turn into a neat, flexible button/toolbar.\r\n          At the moment you'll see a horizontal menu bar, with some buttons\r\n          jammed into the top left hand corner.\r\n        </p>\r\n        <img\r\n          id=\"img_7\"\r\n          src=\"https://i.imgur.com/V7yUVyR.png\"\r\n          alt=\"Flexbox with some buttons jammed into the top left hand corner\"\r\n        />\r\n        <p>First, take a local copy of this example.</p>\r\n        <p>Now, add the following to the bottom of the example's CSS:</p>\r\n        <code className=\"code_separate\">\r\n          {`div {\r\n            \\u00A0display: flex;\r\n            \\u00A0align-items: center;\r\n            \\u00A0ustify-content: space-around;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Refresh the page and you'll see that the buttons are now nicely\r\n          centered, horizontally and vertically. We've done this via two new\r\n          properties.\r\n        </p>\r\n        <p>\r\n          <a\r\n            className=\"align-items\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2SckMi4\"\r\n          >\r\n            align-items\r\n          </a>{' '}\r\n          controls where the flex items sit on the cross axis.\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            By default, the value is <b>stretch</b>, which stretches all flex\r\n            items to fill the parent in the direction of the cross axis. If the\r\n            parent hasn't got a fixed width in the cross axis direction, then\r\n            all flex items will become as long as the longest flex items. This\r\n            is how our first example got equal height columns by default.\r\n          </li>\r\n          <li>\r\n            The <b>center</b> value that we used in our above code causes the\r\n            items to maintain their intrinsic dimensions, but be centered along\r\n            the cross axis. This is why our current example's buttons are\r\n            centered vertically.\r\n          </li>\r\n          <li>\r\n            You can also have values like <b>flex-start</b> and <b>flex-end</b>,\r\n            which will align all items at the start and end of the cross axis\r\n            respectively. See{' '}\r\n            <a\r\n              className=\"align-items\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/2SckMi4\"\r\n            >\r\n              align-items\r\n            </a>{' '}\r\n            for the full details.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          You can override the{' '}\r\n          <a\r\n            className=\"align-items\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2SckMi4\"\r\n          >\r\n            align-items\r\n          </a>{' '}\r\n          behavior for individual flex items by applying the{' '}\r\n          <a\r\n            className=\"align-self\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2Svh3ez\"\r\n          >\r\n            align-self\r\n          </a>{' '}\r\n          property to them. For example, try adding the following to your CSS:\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`button:first-child {\r\n            \\u00A0align-self: flex-end;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Have a look at what effect this has, and remove it again when you've\r\n          finished.\r\n        </p>\r\n        <p>\r\n          <a\r\n            className=\"justify-content\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2vgLtJL\"\r\n          >\r\n            justify-content\r\n          </a>{' '}\r\n          controls where the flex items sit on the main axis.\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            The default value is <b>flex-start</b>, which makes all the items\r\n            sit at the start of the main axis.\r\n          </li>\r\n          <li>\r\n            You can use <b>flex-end</b> to make them sit at the end.\r\n          </li>\r\n          <li>\r\n            <b>center</b> is also a value for <b>justify-content</b>, and will\r\n            make the flex items sit in the center of the main axis.\r\n          </li>\r\n          <li>\r\n            The value we've used above, <b>space-around</b>, is useful — it\r\n            distributes all the items evenly along the main axis, with a bit of\r\n            space left at either end.\r\n          </li>\r\n          <li>\r\n            There is another value, <b>space-between</b>, which is very similar\r\n            to <b>space-around</b> except that it doesn't leave any space at\r\n            either end.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          We'd like to encourage you to play with these values to see how they\r\n          work before you continue.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Ordering_flex_items\">\r\n        <header className=\"section_header\">\r\n          <h2>Ordering flex items</h2>\r\n        </header>\r\n        <p>\r\n          Flexbox also has a feature for changing the layout order of flex\r\n          items, without affecting the source order. This is another thing that\r\n          is impossible to do with traditional layout methods.\r\n        </p>\r\n        <p>\r\n          The code for this is simple: try adding the following CSS to your\r\n          button bar example code:\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`button:first-child {\r\n            \\u00A0order: 1;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Refresh, and you'll now see that the \"Smile\" button has moved to the\r\n          end of the main axis. Let's talk about how this works in a bit more\r\n          detail:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            By default, all flex items have an{' '}\r\n            <a\r\n              className=\"order\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://mzl.la/2vU0Ojx\"\r\n            >\r\n              order\r\n            </a>{' '}\r\n            value of 0.\r\n          </li>\r\n          <li>\r\n            Flex items with higher order values set on them will appear later in\r\n            the display order than items with lower order values.\r\n          </li>\r\n          <li>\r\n            Flex items with the same order value will appear in their source\r\n            order. So if you have four items with order values of 2, 1, 1, and 0\r\n            set on them respectively, their display order would be 4th, 2nd,\r\n            3rd, then 1st.\r\n          </li>\r\n          <li>\r\n            The 3rd item appears after the 2nd because it has the same order\r\n            value and is after it in the source order.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          You can set negative order values to make items appear earlier than\r\n          items with 0 set. For example, you could make the \"Blush\" button\r\n          appear at the start of the main axis using the following rule:\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`button:last-child {\r\n            \\u00A0order: -1;\r\n          }`}\r\n        </code>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Nested_flex_boxes\">\r\n        <header className=\"section_header\">\r\n          <h2>Nested flex boxes</h2>\r\n        </header>\r\n        <p>\r\n          It is possible to create some pretty complex layouts with flexbox. It\r\n          is perfectly ok to set a flex item to also be a flex container, so\r\n          that its children are also laid out like flexible boxes. Have a look\r\n          at{' '}\r\n          <a\r\n            className=\"complex-flexbox.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/31EO50c\"\r\n          >\r\n            complex-flexbox.html\r\n          </a>{' '}\r\n          (\r\n          <a\r\n            className=\"see_it_live_also\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"http://bit.ly/39gr3zd\"\r\n          >\r\n            see it live also\r\n          </a>\r\n          ).\r\n        </p>\r\n        <img\r\n          id=\"img_8\"\r\n          src=\"https://i.imgur.com/EK3tk4P.png\"\r\n          alt=\"Complex flexbox example\"\r\n        />\r\n        <p>\r\n          The HTML for this is fairly simple. We've got a{' '}\r\n          <a\r\n            className=\"section\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ulMDUf\"\r\n          >\r\n            &lt;section&gt;\r\n          </a>{' '}\r\n          element containing three{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>\r\n          s. The third{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          contains three{' '}\r\n          <a\r\n            className=\"div\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2UCZY5e\"\r\n          >\r\n            &lt;div&gt;\r\n          </a>\r\n          s.\r\n        </p>\r\n        <p>Let's look at the code we've used for the layout.</p>\r\n        <p>\r\n          First of all, we set the children of the{' '}\r\n          <a\r\n            className=\"section\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2ulMDUf\"\r\n          >\r\n            &lt;section&gt;\r\n          </a>{' '}\r\n          to be laid out as flexible boxes.\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`section {\r\n            \\u00A0display: flex;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Next, we set some flex values on the{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>\r\n          s themselves. Take special note of the 2nd rule here — we are setting\r\n          the third{' '}\r\n          <a\r\n            className=\"article\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2H6a2LV\"\r\n          >\r\n            &lt;article&gt;\r\n          </a>{' '}\r\n          to have its children laid out like flex items too, but this time we\r\n          are laying them out like a column.\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`article {\r\n            \\u00A0flex: 1 200px;\r\n          }`}\r\n        </code>\r\n        <br />\r\n        <code className=\"code_separate\">\r\n          {`article:nth-of-type(3) {\r\n            \\u00A0flex: 3 200px;\r\n            \\u00A0display: flex;\r\n            \\u00A0flex-flow: column;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Next, we select the first{' '}\r\n          <a\r\n            className=\"div\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2UCZY5e\"\r\n          >\r\n            &lt;div&gt;\r\n          </a>\r\n          . We first use <code>flex:1 100px;</code> to effectively give it a\r\n          minimum height of 100px, then we set its children (the{' '}\r\n          <a\r\n            className=\"button\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/2UCZY5e\"\r\n          >\r\n            &lt;button&gt;\r\n          </a>{' '}\r\n          elements) to also be laid out like flex items. Here we lay them out in\r\n          a wrapping row, and align them in the center of the available space\r\n          like we did in the individual button example we saw earlier.\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`article:nth-of-type(3) div:first-child {\r\n            \\u00A0flex: 1 100px;\r\n            \\u00A0display: flex;\r\n            \\u00A0flex-flow: row wrap;\r\n            \\u00A0align-items: center;\r\n            \\u00A0justify-content: space-around;\r\n          }`}\r\n        </code>\r\n        <p>\r\n          Finally, we set some sizing on the button, but more interestingly we\r\n          give it a flex value of 1 auto. This has a very interesting effect,\r\n          which you'll see if you try resizing your browser window width. The\r\n          buttons will take up as much space as they can and sit as many on the\r\n          same line as they can, but when they can no longer fit comfortably on\r\n          the same line, they'll drop down to create new lines.\r\n        </p>\r\n        <code className=\"code_separate\">\r\n          {`button {\r\n            \\u00A0flex: 1 auto;\r\n            \\u00A0margin: 5px;\r\n            \\u00A0font-size: 18px;\r\n            \\u00A0line-height: 1.5;\r\n          }`}\r\n        </code>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Cross_browser_compatibility\">\r\n        <header className=\"section_header\">\r\n          <h2>Cross browser compatibility</h2>\r\n        </header>\r\n        <p>\r\n          Flexbox support is available in most new browsers — Firefox, Chrome,\r\n          Opera, Microsoft Edge and IE 11, newer versions of Android/iOS, etc.\r\n          However you should be aware that there are still older browsers in use\r\n          that don't support Flexbox (or do, but support a really old,\r\n          out-of-date version of it.)\r\n        </p>\r\n        <p>\r\n          While you are just learning and experimenting, this doesn't matter too\r\n          much; however if you are considering using flexbox in a real website\r\n          you need to do testing and make sure that your user experience is\r\n          still acceptable in as many browsers as possible.\r\n        </p>\r\n        <p>\r\n          Flexbox is a bit trickier than some CSS features. For example, if a\r\n          browser is missing a CSS drop shadow, then the site will likely still\r\n          be usable. Not supporting flexbox features however will probably break\r\n          a layout completely, making it unusable.\r\n        </p>\r\n        <p>\r\n          We discuss strategies for overcoming cross browser support issues in\r\n          our{' '}\r\n          <a\r\n            className=\"Cross_browser_testing\"\r\n            target=\"_blank\"\r\n            href=\"https://mzl.la/31DzamJ\"\r\n          >\r\n            Cross browser testing\r\n          </a>{' '}\r\n          module.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Test_your_skills!\">\r\n        <header className=\"section_header\">\r\n          <h2>Test your skills!</h2>\r\n        </header>\r\n        <p>\r\n          We have covered a lot in this article, but can you remember the most\r\n          important information? You can find some further tests to verify that\r\n          you've retained this information before you move on — see{' '}\r\n          <a\r\n            className=\"Test_your_skills:_Flexbox\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/39fvQAI\"\r\n          >\r\n            Test your skills: Flexbox\r\n          </a>\r\n          .\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Summary\">\r\n        <header className=\"section_header\">\r\n          <h2>Summary</h2>\r\n        </header>\r\n        <p>\r\n          That concludes our tour of the basics of flexbox. We hope you had fun,\r\n          and will have a good play around with it as you travel forward with\r\n          your learning. Next we'll have a look at another important aspect of\r\n          CSS layouts — CSS Grids.\r\n        </p>\r\n      </section>\r\n      <section className=\"main-section\" id=\"Reference\">\r\n        <header className=\"section_header\">\r\n          <h2>Reference</h2>\r\n        </header>\r\n        <p>\r\n          All the documentation in this page is taken from{' '}\r\n          <a\r\n            className=\"reference-link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://mzl.la/31AVkpK\"\r\n          >\r\n            MDN\r\n          </a>\r\n          .\r\n        </p>\r\n      </section>\r\n      <footer>\r\n        <p>&copy; Konstantin Krumin 2020</p>\r\n      </footer>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles/main.scss\";\n\nimport Navbar from \"./components/navbar-components/navbar\";\nimport Main from \"./components/main\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Main />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}